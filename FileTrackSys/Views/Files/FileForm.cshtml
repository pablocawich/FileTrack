@using System.Web.UI.WebControls
@using FileTracking.ViewModels

@model FileTracking.ViewModels.FileViewModel
@{
    ViewBag.Title = "FileForm";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="row">
    <div class="col-lg-12">
        @if (Model.Title == "Update file")
        {
        <h2 class="page-header"><strong>@Model.Title @Model.File.FileNumber</strong></h2>
            
        }
        else
        {
            <h2 class="page-header"><strong>@Model.Title</strong></h2>
        }

    </div>
    <!-- /.col-lg-12 -->
</div>


<div class="row">
    @using (Html.BeginForm("Save", "Files", FormMethod.Post, new { @id = "fileFormId" }))
    { 
        @Html.ValidationSummary( true,"Ensure the following errors are resolved:");
        <div class="col-md-4">
            <div class="form-group">
                @Html.LabelFor(f => f.File.FirstName, new { @class = "control-label" })
                <div class="input-group">
                    <span class="input-group-addon">
                        <i class="glyphicon glyphicon-user"></i>
                    </span>@Html.TextBoxFor(f => f.File.FirstName, new { @class = "form-control", @placeholder = "E.g. John" })
                </div>
                @Html.ValidationMessageFor(f => f.File.FirstName)
            </div>
            <div class="form-group">
                @Html.LabelFor(f => f.File.MiddleName, new { @class = "control-label" })
                <div class="input-group">
                    <span class="input-group-addon">
                        <i class="glyphicon glyphicon-user"></i>
                    </span>@Html.TextBoxFor(f => f.File.MiddleName, new { @class = "form-control", @placeholder = "E.g. Micheal" })
                </div>
                @Html.ValidationMessageFor(f => f.File.MiddleName)
            </div>
            <div class="form-group">
                @Html.LabelFor(f => f.File.LastName, new { @class = "control-label" })
                <div class="input-group">
                    <span class="input-group-addon">
                        <i class="glyphicon glyphicon-user"></i>
                    </span>@Html.TextBoxFor(f => f.File.LastName, new { @class = "form-control", @placeholder = "E.g. Smith" })
                </div>
                @Html.ValidationMessageFor(f => f.File.LastName)
            </div>
            <div class="form-group">
                @Html.LabelFor(f => f.File.Street, new { @class = "control-label" })
                <div class="input-group">
                    <span class="input-group-addon">
                        <i class="fa fa-map-pin"></i>
                    </span>
                    @Html.TextBoxFor(f => f.File.Street, new { @class = "form-control", @placeholder = "E.g. 21 Price Street" })
                </div>
                @Html.ValidationMessageFor(f => f.File.Street)
            </div>
            <div class="form-group">
                @Html.LabelFor(f => f.File.DistrictsId, new { @class = "control-label" })
                <div class="input-group">
                    <span class="input-group-addon" style="max-width: 100%;"><i class="fa fa-location-arrow"></i></span>
                    @Html.DropDownListFor(f => f.File.DistrictsId, new SelectList(Model.Districts, "Id", "District"), "Select client's district :", new { @class = "form-control" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(f => f.File.LocationId, new { @class = "control-label" })
                <div class="input-group">
                    <span class="input-group-addon">
                        <i class="fa fa-map-marker"></i>
                    </span>
                    @Html.DropDownListFor(f => f.File.LocationId, new SelectList(Model.Locations, "LocationId","Name"),"Select client's address :",new { @class = "form-control" })
                </div>
                @Html.ValidationMessageFor(f => f.File.LocationId)
            </div>
            <div class="form-group">
                @Html.LabelFor(f => f.File.FileTypeId, new { @class = "control-label" })
                <div class="input-group">
                    <span class="input-group-addon" style="max-width: 100%;"><i class="fa fa-file-text-o"></i></span>
                    @Html.DropDownListFor(f => f.File.FileTypeId, new SelectList(Model.FileTypes, "Id", "Type"), "Select a file type :", new { @class = "form-control" })
                </div>
                @Html.ValidationMessageFor(f => f.File.FileTypeId)
            </div>
        </div>
        <div class="col-md-4">
            @if (Model.Title != "New File")
            {
                <div class="form-group">
                    @Html.LabelFor(f => f.File.PreviousFileNumber, new { @class = "control-label" })
                    <div class="input-group">
                        <span class="input-group-addon">
                            <i class="fa fa-clipboard"></i>
                        </span>@Html.TextBoxFor(f => f.File.PreviousFileNumber, new { @class = "form-control", @placeholder = "max of 100 characters..." })
                    </div>
                    @Html.ValidationMessageFor(f => f.File.PreviousFileNumber)
                </div>
            }
            <div class="form-group">
                @Html.LabelFor(f => f.File.LoanNumber, new { @class = "control-label" })
                <div class="input-group">
                    <span class="input-group-addon">
                        <i class="fa fa-credit-card"></i>
                    </span>@Html.TextAreaFor(f => f.File.LoanNumber, new { @class = "form-control", @placeholder = "Can have a max of 164 characters" })
                </div>
                @Html.ValidationMessageFor(f => f.File.LoanNumber)
            </div>
            <div class="form-group">
                @Html.LabelFor(f => f.File.FileStatusId, new { @class = "control-label" })
                <div class="input-group">
                    <span class="input-group-addon" style="max-width: 100%;"><i class="fa fa-ellipsis-h"></i></span>
                    @Html.DropDownListFor(f => f.File.FileStatusId, new SelectList(Model.FileStatuses, "Id", "Status"), "Select file type status :", new { @class = "form-control" })
                </div>
                @Html.ValidationMessageFor(f => f.File.FileStatusId)
            </div>
            <div class="panel panel-info">
                <div class="panel-heading">
                    <h2 class="panel-title">Optional</h2>
                </div>
                <div class="panel-body">
                    <div class="form-group">
                        @Html.LabelFor(f => f.File.IdentificationOptionId, new { @class = "control-label" })
                        <div class="input-group">
                            <span class="input-group-addon" style="max-width: 100%;"><i class="glyphicon glyphicon-list"></i></span>
                            @Html.DropDownListFor(f => f.File.IdentificationOptionId, new SelectList(Model.IdentificationOptions, "Id", "Identification"), "Select Identification Type :", new { @class = "form-control" })
                        </div>
                        @Html.ValidationMessageFor(f => f.File.IdentificationOptionId)
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(f => f.File.IdentificationNumber, new { @class = "control-label" })
                        <div class="input-group">
                            <span class="input-group-addon">
                                <i class="glyphicon glyphicon-credit-card"></i>
                            </span>@Html.TextBoxFor(f => f.File.IdentificationNumber, new { @class = "form-control", @placeholder = "E.g. 000333138 " })
                        </div>
                        @Html.ValidationMessageFor(f => f.File.IdentificationNumber)
                    </div>
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(f => f.File.FileAccess, new { @class = "control-label" })
                <div class="input-group">
                    <span class="input-group-addon">
                        <i class="fa fa-paper-plane"></i>
                    </span>@Html.TextAreaFor(f => f.File.FileAccess, new { @class = "form-control", @placeholder = "Maximum of 200 characters permitted..." })
                </div>
                @Html.ValidationMessageFor(f => f.File.FileAccess)
            </div>
            <div class="form-group">
                @Html.LabelFor(f => f.File.Comments, new { @class = "control-label" })
                <div class="input-group">
                    <span class="input-group-addon">
                        <i class="fa fa-commenting"></i>
                    </span>@Html.TextAreaFor(f => f.File.Comments, new { @class = "form-control", @placeholder = "Maximum of 255 characters permitted..." })
                </div>
                @Html.ValidationMessageFor(f => f.File.Comments)
            </div>

        </div>
        
        <div class="col-md-4">
            <p>Newly created file will by default be stored as volume 1</p>
            <p>Ensure an id number that corresponds to its Identification type is provided once a identification type is selected</p>
            @if (Model.Title == "New File")
            {
                <div class="form-group">
                    @Html.LabelFor(f => f.File.VolumeOneDescription, new {@class = "control-label"})
                    <div class="input-group">
                        <span class="input-group-addon"><i class="fa fa-commenting-o"></i>
                        </span>@Html.TextAreaFor(f => f.File.VolumeOneDescription, new {@class = "form-control", @placeholder = "200 character limit..."})
                    </div>
                    @Html.ValidationMessageFor(f => f.File.VolumeOneDescription)
                </div>
            }
            else
            {                   
                @Html.HiddenFor(f=>f.File.VolumeOneDescription)
            }

            @Html.HiddenFor(f => f.File.Id)
            @Html.HiddenFor(f => f.File.FileNumber)
            @Html.HiddenFor(f => f.File.Volume)
            @Html.HiddenFor(f => f.File.IdentificationOptionId)
          
            @Html.HiddenFor(f=>f.File.PreviousFileNumber)

            @Html.AntiForgeryToken()
            <button id="submitFileBtn" type="button" class="btn btn-primary btn-sm">Save File <i class="fa fa-floppy-o"></i></button>
            <button type="button" class="btn btn-danger btn-sm" id="cancelBtn">Cancel <i class="fa fa-close"></i></button>
        </div>
         
    }
</div>

@section scripts
{
    @Scripts.Render("~/bundles/jqueryval")
    <script>
        $(document).ready(function() {
            let submitCounter = 0;
            //as page loads, this will ensure the default value disables the fields that follows
            if ($("#File_IdentificationOptionId").val() == 0)
                $("#File_IdentificationNumber").prop("disabled", true);

            //We only want to get the default value when the file being created, to do that we
            //check if input element is 0, which means no value
            if ($("#File_FileStatusId").val() == 0)
                $("#File_FileStatusId").val(1);

            //Ensures Identification select list responds to the ID number text box according to input
            //if a value is selected the text box is enabled else remains disabled

            $("#File_IdentificationOptionId").on('change',
                function() {

                    var listVal = $(this).val();

                    if (listVal != null)
                        $("#File_IdentificationNumber").prop("disabled", false);

                    if ($("#File_IdentificationOptionId").val() == 0) {
                        $("#File_IdentificationNumber").prop("disabled", true);
                        $("#File_IdentificationNumber").val("");
                    }
                });
            //form cancel button. Simply resets all fields
            $("#cancelBtn").on('click',
                () => {
                    bootbox.confirm("Are you sure you want to cancel and return to viewing files",
                        function(result) {
                            if (result) {
                                window.location.href = siteURL + "/Files/SearchFiles";
                            }
                        });

                });
            /*$('#fileFormId').submit(function(e) {
                // e.preventDefault();
                bootbox.confirm({
                    size: "medium",
                    message: "Are you sure want to submit?",
                    buttons: {
                        confirm: {
                            label: 'Yes',
                            className: 'btn-round-iv'
                        },
                        cancel: {
                            label: 'No',
                            className: 'btn-round-danger'
                        }
                    },
                    callback: function(result) {
                        if (result) {
                            return true;
                        } else {
                            return false;
                        }
                    }
                });*/
            $("#submitFileBtn").on("click", function () {
          
                    bootbox.confirm({
                        size: "medium",
                        message: "Are you sure want to submit?",
                        buttons: {
                            confirm: {
                                label: 'Yes',
                                className: 'btn-round-iv'
                            },
                            cancel: {
                                label: 'No',
                                className: 'btn-round-danger'
                            }
                        },
                        callback: function(result) { /* result is a boolean; true = OK, false = Cancel*/
                            if (result) {
                                $("#fileFormId").submit();
                            } 
                        }
                    });
                });
                // return true;
           

            /*$("#submitFileBtn").on("click",
                function() {
                    $(this).attr("disabled", true);
                    bootbox.alert("Attempting to submit....");

                    $(this).attr("disabled", false);
                });
                */
        });
    </script>

}
